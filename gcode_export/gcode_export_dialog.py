# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GcodeExportDialog
                                 A QGIS plugin
 Lets you export your project to G-code for usage with a pen plotter
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-06-08
        git sha              : $Format:%H$
        copyright            : (C) 2020 by mr.kenhoff
        email                : mrkenhoff+qgis@mailbox.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import numpy as np

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsWkbTypes

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'gcode_export_dialog_base.ui'))


class CoordMapper:
    def __init__(self, map_bounds, machine_bounds):
        self.map_bounds = map_bounds
        self.machine_bounds = machine_bounds

    def transform(self, lat, lon):
        """
            Accepts a latitude/longitude point (or multiple points as a numpy array)
            and converts it to machine coordinates
        """
        lat_range = np.diff(self.map_bounds["lat"])[0]
        y_range = np.diff(self.machine_bounds["y"])[0]
        y = (lat - self.map_bounds["lat"][0]) / lat_range * y_range + self.machine_bounds["y"][0]

        lon_range = np.diff(self.map_bounds["lon"])[0]
        x_range = np.diff(self.machine_bounds["x"])[0]
        x = (lon - self.map_bounds["lon"][0]) / lon_range * x_range + self.machine_bounds["x"][0]

        return (x, y)

def geometry2gcode(geometry, map_bounds, machine_bounds, z_height, z_safe_height, feed=1000, link_feed=1400):
    coord_mapper = CoordMapper(map_bounds, machine_bounds)
    gcode = ""

    out_of_bounds_tolerance = 1e-3

    def in_machine_bounds(x, y, machine_bounds, tolerance=1e-3):
        """ Returns true if the specified x,y coordinate lies within the machine
            bound. A tolerance can be specified to circumvent false
            "out of bound" results on the boundries.
        """
        return  x <= (np.max(machine_bounds["x"])+tolerance) and \
                x >= (np.min(machine_bounds["x"])-tolerance) and \
                y <= (np.max(machine_bounds["y"])+tolerance) and \
                y >= (np.min(machine_bounds["y"])-tolerance)

    gcode += "G0 Z%f F%f\n"%(z_safe_height, link_feed)
    within_bounds = False
    for point in geometry:
        (x, y) = coord_mapper.transform(point.y(), point.x())
        if in_machine_bounds(x, y, machine_bounds):
            if within_bounds:
                gcode += "G1 X%f Y%f F%f\n"%(x, y, feed)
            else:
                gcode += "G0 X%f Y%f F%f\n"%(x, y, link_feed)
                gcode += "G1 Z%f F%f\n"%(z_height, feed)
            within_bounds = True
        else:
            if within_bounds:
                print("Goind out of bounds")
                print((x, y))
                gcode += "G0 Z%f F%f\n"%(z_safe_height, link_feed)
            within_bounds = False

    gcode += "G0 Z%f F%f\n"%(z_safe_height, link_feed)

    return gcode



class GcodeExportDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(GcodeExportDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.generate_gcode_button.clicked.connect(self.generate_gcode)

    def get_current_machine_bounds(self):
        machine_width = self.machine_x_size.value()
        machine_height = self.machine_y_size.value()

        if self.origin_upper_left.isChecked():
            return {"x": (0, machine_width), "y": (-machine_height, 0)}
        elif self.origin_lower_left.isChecked():
            return {"x": (0, machine_width), "y": (0, machine_height)}
        elif self.origin_lower_right.isChecked():
            return {"x": (-machine_width, 0), "y": (0, machine_height)}
        elif self.origin_upper_right.isChecked():
            return {"x": (-machine_width, 0), "y": (-machine_height, 0)}
        elif self.origin_center.isChecked():
            return {"x": (-machine_width/2, machine_width/2), "y": (-machine_height/2, machine_height/2)}

    def generate_gcode(self):

        machine_bounds = self.get_current_machine_bounds()

        extent = self.extentGroupBox.outputExtent()
        map_bounds = {
            "lon": (extent.xMinimum(), extent.xMaximum()),
            "lat": (extent.yMinimum(), extent.yMaximum())
        }


        plot_speed = self.plot_speed_spinbox.value()
        rapid_speed = self.rapid_speed_spinbox.value()
        pen_down_height = self.pen_down_height_spinbox.value()
        pen_up_height = self.pen_up_height_spinbox.value()

        gcode = ""

        layer = self.layer_select.currentLayer()
        for feature in layer.getFeatures():
            geom = feature.geometry()

            geomSingleType = QgsWkbTypes.isSingleType(geom.wkbType())
            if geom.type() == QgsWkbTypes.PointGeometry:
                raise Exception("Point geometry not supported")
            elif geom.type() == QgsWkbTypes.LineGeometry:
                if geomSingleType:
                    gcode += geometry2gcode(geom.asPolyline(), map_bounds, machine_bounds, pen_down_height, pen_up_height, feed=plot_speed, link_feed=rapid_speed)
                else:
                    poly_geom = geom.asMultiPolyline()
                    for poly_geom in geom.asMultiPolyline():
                        gcode += geometry2gcode(poly_geom, map_bounds, machine_bounds, pen_down_height, pen_up_height, feed=plot_speed, link_feed=rapid_speed)
            elif geom.type() == QgsWkbTypes.PolygonGeometry:
                if geomSingleType:
                    for poly_geom in geom.asPolygon():
                        gcode += geometry2gcode(poly_geom, map_bounds, machine_bounds, pen_down_height, pen_up_height, feed=plot_speed, link_feed=rapid_speed)
                else:
                    for multi_geom in geom.asMultiPolygon():
                        for poly_geom in multi_geom:
                            gcode += geometry2gcode(poly_geom, map_bounds, machine_bounds, pen_down_height, pen_up_height, feed=plot_speed, link_feed=rapid_speed)
            else:
                raise Exception("Unknown or invalid geometry")

        dialog = QtWidgets.QFileDialog()
        dialog.setAcceptMode(QtWidgets.QFileDialog.AcceptSave)

        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            path = dialog.selectedFiles()[0]
            with open(path, "w") as file:
                file.write(gcode)
